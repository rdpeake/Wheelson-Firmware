#include "RCDriver.h"#include "WiFi.h"#include <sys/socket.h>#include <netinet/in.h>#include <unistd.h>#include <Wheelson.h>RCDriver::RCDriver(Display *_display){	disableCore0WDT();	disableCore1WDT();	display = _display;	WiFi.begin("Wheelson RC", "WheelsonRCServer");	//while(WiFi.status() != WL_CONNECTED && WiFi.status() != WL_CONNECT_FAILED) delayMicroseconds(1000);	if (WiFi.status() == WL_CONNECTED){		printf("Connected, IP address %s\n", WiFi.localIP().toString().c_str());		connected = true;		startControlSocket();		startFeedSocket();	}	if(!cam.isInited()){		printf("\nCamera not initialized.\n");		for(;;);	}}void RCDriver::startFeedSocket(){	feedSock = socket(AF_INET, SOCK_STREAM, 0);	if(feedSock < 0){		printf("[FEED] Socket failed: %d\n", feedSock);		return;	}	delayMicroseconds(1000);	printf("[FEED] Socket initialized\n");	sockaddr_in servaddrFeed;	bzero(&servaddrFeed, sizeof(servaddrFeed));	servaddrFeed.sin_family = AF_INET;	inet_aton(accessPointIP, &servaddrFeed.sin_addr);	servaddrFeed.sin_port = htons(CAMERA_FEED_PORT);	if(connect(feedSock, reinterpret_cast<const sockaddr *>(&servaddrFeed), sizeof(servaddrFeed)) == 0){		printf("[FEED] Connected\n");		feedRunning = true;	}else{		printf("Error %d\n", errno);		feedRunning = false;	}}void RCDriver::startControlSocket(){	controlSock = socket(AF_INET, SOCK_STREAM, 0);	if(controlSock < 0){		printf("[CONTROL] Socket failed: %d\n", controlSock);		return;	}	delayMicroseconds(1000);	printf("[CONTROL] Socket initialized\n");	sockaddr_in servaddrCtrl;	bzero(&servaddrCtrl, sizeof(servaddrCtrl));	servaddrCtrl.sin_family = AF_INET;	inet_aton(accessPointIP, &servaddrCtrl.sin_addr);	servaddrCtrl.sin_port = htons(CONTROL_PORT);	if(connect(controlSock, reinterpret_cast<const sockaddr *>(&servaddrCtrl), sizeof(servaddrCtrl)) == 0){		printf("\n[CONTROL] Connected\n");		controlRunning = true;	}else{		printf("Error %d\n", errno);		controlRunning = false;	}}void RCDriver::stopFeedSocket(){	if(feedSock != -1){		close(feedSock);		feedSock = -1;		printf("\nStopping feed socket.\n");	}	feedRunning = false;}void RCDriver::stopControlSocket(){	if(controlSock != -1){		close(controlSock);		controlSock = -1;		printf("\nStopping control socket.\n");	}	controlRunning = false;}void RCDriver::process(){	if(connected){		if(feedRunning){			if(millis() > 30000 && !testVar2){				feedRunning = false;				testVar2 = true;			}			cam.loadFrame();			while(1 != send(feedSock, &feedBegin, 1, MSG_DONTWAIT)){				if(errno == 104){					printf("Error %d\n", errno);					feedRunning = false;				}else{					yield();				}			}			size_t sendRet = 0;			for(int i = 0; i < 120; ++i){				while(160 * 2 != sendRet){					sendRet = send(feedSock, &cam.getRGB565()[160 * i], 160 * 2, MSG_DONTWAIT);					if(errno == 104){						printf("Error %d\n", errno);						feedRunning = false;					}else{						yield();					}				}				sendRet = 0;				uint16_t endFrame = 0;				while(2 != recv(feedSock, &endFrame, 2, MSG_DONTWAIT)){					yield();				}				if(endFrame != 0x0AAAA){					printf("\nDidn't receive frame end.\n");					for(;;);				}			}			while(1 != send(feedSock, &feedEnd, 1, MSG_DONTWAIT)){				if(errno == 104){					printf("Error %d\n", errno);					feedRunning = false;				}else{					yield();				}			}			uint16_t endFrame = 0;			while(2 != recv(feedSock, &endFrame, 2, MSG_DONTWAIT)){				yield();			}			if(endFrame != 0x0AAAA){				printf("\nDidn't receive frame end sequence.\n");				for(;;);			}			printf("Sent frame.\n");			memcpy(processedBuffer, cam.getRGB565(), FRAME_LENGTH * 2);			cam.releaseFrame();		}else{			stopFeedSocket();			startFeedSocket();		}	}}void RCDriver::draw(){	display->getBaseSprite()->clear(TFT_BLACK);	if(!connected){		display->getBaseSprite()->clear(TFT_BLUE);	}else{		if(feedRunning){			display->getBaseSprite()->drawIcon(processedBuffer, 0, 0, 160, 120);		}else{			display->getBaseSprite()->clear(TFT_RED);		}	}	display->commit();}void RCDriver::loop(uint){	draw();	if(!connected){		if (WiFi.status() == WL_CONNECTED){			printf("Connected, IP address %s\n", WiFi.localIP().toString().c_str());			connected = true;			startControlSocket();			startFeedSocket();		}	}else{		if(controlRunning){			if(millis() > 20000 && !testVar1){				controlRunning = false;				testVar1 = true;			}			if(2 == recv(controlSock, &command, 2, MSG_DONTWAIT)){				printf("\n[CONTROL] Received command: 0x%x\n", command);				switch((command >> 8) & 0x00FF){					case FORWARD:						printf("FORWARD --> Intensity: %d\n", command & 0x00FF);						break;					case BACKWARD:						printf("BACKWARD --> Intensity: %d\n", command & 0x00FF);						break;					case LEFT:						printf("LEFT --> Intensity: %d\n", command & 0x00FF);						break;					case RIGHT:						printf("RIGHT --> Intensity: %d\n", command & 0x00FF);						break;					default:						break;				}			}		}else{			stopControlSocket();			startControlSocket();		}	}}bool RCDriver::isConnected(){	return connected;}